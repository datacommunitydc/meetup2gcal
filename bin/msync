#!/usr/bin/env node

/**
 *  msync
 *  A command line tool that synchronizes Meetup with our db/gcal.
 *
 *  Author:   Harlan Harris <harlan@datacommunitydc.org>
 *  Created:  Sun Jul 13 12:38:35 2014 -0400
 *
 *  Copyright (C) 2014 Data Community DC
 *  For license information, see LICENSE.txt
 *
 *  ID: msync [] harlan@datacommunitydc.org $
 */

// JS Hint directives and strict mode
/* globals exports,__filename */
'use strict';

// Async finish command
function finish(err) {
  if (err) {
    console.log('An error occurred!', err);
    process.exit(1);
  } else {
    process.exit(0);
  }
}

// main functionality
function main(argv) {

  // Initialize local variables
  var mongoose = require('mongoose')
    , config   = require('../config/application')
    , logger   = require('../app/utils/lumberjack')
    , meetup   = require('meetup-api')(config.meetup.apiKey)
    , fs = require('fs')
    , _  = require('underscore')
    , Q  = require('q');

  _.str  = require('underscore.string');

  // Initialize the connection to the database
  var db = mongoose.connection;
  db.on('error', console.error.bind(console, 'connection error:'));
  db.once('open', function callback() {
      logger.info('Connected to the database at %s', config.database.connection);
  });
  mongoose.connect(config.database.connection);

  // Load the models that are required
  var Meetup = require('../app/models/meetup');
  var Event  = require('../app/models/meetup');

  // Get stuff from Meetup.com
  var group_urlnames = ["data-community-dc", "data-science-dc", "Data-Visualization-DC", "DC-NLP"];
  Q.all(_.map(group_urlnames, function(group_urlname) {
    return Q.ninvoke(meetup, "getEvents", {'group_urlname' : group_urlname});
  }))
  .then(function(results) {
    console.log(results);
    finish();
  }, finish)
  .fail(finish);

}

// Only run this script if we're main
if (require.main == module) {
  try {
    var args = process.argv.slice(2);
    main(args);
  } catch (err) {
    finish(err);
  }
}
