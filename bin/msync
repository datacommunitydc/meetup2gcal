#!/usr/bin/env node

/**
 *  msync
 *  A command line tool that synchronizes Meetup with our db/gcal.
 *
 *  Author:   Harlan Harris <harlan@datacommunitydc.org>
 *  Created:  Sun Jul 13 12:38:35 2014 -0400
 *
 *  Copyright (C) 2014 Data Community DC
 *  For license information, see LICENSE.txt
 *
 *  ID: msync [] harlan@datacommunitydc.org $
 */

// JS Hint directives and strict mode
/* globals exports,__filename */
'use strict';

// Async finish command
function finish(err) {
  if (err) {
    console.log('An error occurred!', err);
    process.exit(1);
  } else {
    process.exit(0);
  }
}

// main functionality
function main(argv) {

  // Initialize local variables
  var mongoose = require('mongoose')
    , config   = require('../config/application')
    , logger   = require('../app/utils/lumberjack')
    , meetup   = require('meetup-api')(config.meetup.apiKey)
    , request = require('google-oauth-jwt').requestWithJWT()
    , fs = require('fs')
    , _  = require('underscore')
    , Q  = require('q');

  _.str  = require('underscore.string');

  // Initialize the connection to the database
  var db = mongoose.connection;
  db.on('error', console.error.bind(console, 'connection error:'));
  db.once('open', function callback() {
      logger.info('Connected to the database at %s', config.database.connection);
  });
  mongoose.connect(config.database.connection);

  // Load the models that are required
  var Meetup = require('../app/models/meetup');
  var Event  = require('../app/models/event');

  // Google Calendar
  // get upcoming events for all known groups
  var jwt_obj = {
                  email: config.jwt.email,
                  keyFile: config.jwt.keyFile,
                  scopes: ['https://www.googleapis.com/auth/calendar']
                };
  Q(Meetup.find().exec())
  .then(function(meetup_objs) {
    //console.log(meetup_objs);
    _.map(meetup_objs, function(meetup_obj) {
      // get events for this group and push them to GCal
      meetup.getEvents({'group_id' : meetup_obj.meetup_id}, function(err,events) {
        if (err) finish(err);
        _.map(events.results, function(oneevent) {
          var post_body = JSON.stringify({
              'summary': oneevent.name,
              'location': oneevent.venue.name + ", " + oneevent.venue.address_1 + ", " +
                oneevent.venue.city + ", " + oneevent.venue.state,
              'start': {
                'dateTime': new Date(oneevent.time)
              },
              'end': {
                'dateTime': new Date(oneevent.time + (oneevent.duration || 1000*60*60*2))
              },
              'description': oneevent.event_url + "\n\n" + oneevent.description,
              'source': {
                'title': "Event Listing on Meetup.com",
                'url': oneevent.event_url
              }
            });
          console.log(post_body);
          request.post({
            url: 'https://www.googleapis.com/calendar/v3/calendars/' + config.gcalID + '/events',
            jwt: jwt_obj,
            headers: {'content-type': 'application/json'},
            body: post_body
          },
          function (err, res, body) {
            if (err) finish(err);
            console.log(body); 
          });
        })
      })
    })
  })
};

// Only run this script if we're main
if (require.main == module) {
  try {
    var args = process.argv.slice(2);
    main(args);
  } catch (err) {
    finish(err);
  }
}
